#!/usr/bin/env ruby

# == Synopsis 
#   This will recursivly loop through a directory and it's subdirectories,
#   scanning file headers to see if they are tfa managed
#
# == Examples
#   Search for available files:
#     tfs search org.cccs.jslibs jsMap 1.0
#   File Export:
#     tfs export org.cccs.jslibs jsMap 1.0
#   Update downloaded files:
#     tfs update 
#   Upgrade downloaded files to latest version:
#     tfs upgrade
#   List downloaded files:
#     tfs list
#   Remove all exported files:
#     tfs clean
#
# == Usage 
#   tfs [options] action group_id artefact_id version
#
#   For help use: tfa -h
#
# == Options
#   -h, --help          Displays help message
#   -v, --version       Display the version, then exit
#   -q, --quiet         Output as little as possible, overrides verbose
#   -V, --verbose       Verbose output
#
# == Author
#   Craig Cook
#
# == Copyright
#   Copyright (c) 2011 Craig Cook

require 'rdoc/usage'
require 'rexml/document'
require 'optparse' 
require 'ostruct'
require 'date'
require 'FileUtils'
require 'ftools'
require 'net/http'
require 'net/https'

include REXML

class String
  def starts_with?(prefix)
    self[0, prefix.length] == prefix
  end  
  
  def ends_with?(prefix)
    self[self.length - prefix.length, self.length] == prefix
  end  
end

class Utils  
  def self.find_files(dir)
    files = []
    tfs_dir = "#{dir}/.tfs"
    if (File::directory?(tfs_dir)) then
        Dir.foreach(tfs_dir) do |file|   
          if File::file?("#{tfs_dir}/#{file}") then
            files.push "#{tfs_dir}/#{file}"
          end     
        end      
    end
    files 
  end  
  
  def self.read_file(file_name)
    file = File.open(file_name)
    values = {}
    
    file.each_line do |line|
      if line.include? '=' then
        key = line[0, line.index('=')]
        value = line[line.index('=')+1, line.length].strip
        values[key] = value
      end
    end
    values    
  end
  
  def self.node_value(doc, node)
    XPath.each(doc, "#{node}") do |e| 
      return e.text
    end
  end

  def self.is_bigger_version?(v1, v2)
    if (Integer(v2[0]) > Integer(v1[0])) then
      true
    elsif (Integer(v2[2]) > Integer(v1[2])) then
      true      
    elsif (Integer(v2[4]) > Integer(v1[4])) then
      true      
    elsif (Integer(v2[6]) > Integer(v1[6])) then
      true      
    else
      false
    end
  end

  def self.get_files(group_id, artefact_id, version)
    url = "http://localhost:8080/tfs/service/files/"
    if !group_id.nil? then
      url = "#{url}#{group_id}/"
    end    
    
    if !artefact_id.nil? then
      url = "#{url}#{artefact_id}/"
    end
    
    if !version.nil? then
      url = "#{url}#{version}/"
    end    
    
    puts "Searching for files at #{url}"
    resp = Net::HTTP.get_response(URI.parse(url))
    doc = Document.new(resp.body)    
    files = []
    XPath.each(doc, '//file') do |file| 
      file = TFSFile.new(node_value(file, 'groupId'), node_value(file, 'artefactId'), node_value(file, 'version'), node_value(file, 'extension'), node_value(file, 'url'))
      files.push file 
    end    
    files
  end

  #TODO 404 etc handling
  def self.download(url, file_name)
     puts "Downloading file [#{file_name}] from: #{url}"    
     httpsuri = URI.parse(url)
     request = Net::HTTP.new(httpsuri.host, httpsuri.port)

     if httpsuri.port == 443
       request.use_ssl = true
       request.verify_mode = OpenSSL::SSL::VERIFY_NONE
     end

     response = request.get(httpsuri.path)    

     open(file_name, "wb") do |file|
         file.write(response.body)
     end    
  end  
    
  def self.print_hash(hash)
    hash.each do | key, value |
      puts "Key [#{key}] Value [#{value}]"
    end    
  end  
end

class TFSFile
  attr_accessor :group_id
  attr_accessor :artefact_id
  attr_accessor :version
  attr_accessor :extension      
  attr_accessor :url
  
  def initialize(group_id, artefact_id, version, extension, url)
    @group_id = group_id
    @artefact_id = artefact_id
    @version = version
    @extension = extension
    @url = url
  end
  
  def name
    "#{@artefact_id}-#{@version}.#{@extension}"
  end
  
  def key
    "#{@group_id} #{@artefact_id} #{@version}"
  end  
end

class TFS
  def initialize
    @base_url = 'http://localhost:8080/tfs/service'
  end  
  
  def export(group_id, artefact_id, version)
    url = "#{@base_url}/files/#{group_id}/#{artefact_id}/#{version}/"
    puts "Getting meta-data from: #{url}"
    resp = Net::HTTP.get_response(URI.parse(url))
    doc = Document.new(resp.body)
    file_url = Utils.node_value(doc, '/file/url')    
    artefact_id = Utils.node_value(doc, '/file/artefactId')        
    group_id = Utils.node_value(doc, '/file/groupId')            
    version = Utils.node_value(doc, '/file/version')            
    extension = Utils.node_value(doc, '/file/extension')            
    file_name = "#{artefact_id}-#{version}.#{extension}"
    conf_name = "#{file_name}.tfs"

    if !File::directory?('.tfs') then
      Dir.mkdir('.tfs') 
    end
      
    if !File::file?(".tfs/#{conf_name}") then
      File.open(".tfs/#{conf_name}", 'w') do |f| 
        f << "groupId=#{group_id}\n"
        f << "artefactId=#{artefact_id}\n"
        f << "version=#{version}\n"
        f << "directory=#{Dir.pwd}\n"                
        f << "fileName=#{file_name}\n"        
        f << "extension=#{extension}\n"                
        f << "url=#{file_url}\n"
      end      
    end
    
    if File::file?(file_name) then
      puts "File #{file_name} already exists, consider an update instead"
    else
      Utils.download(file_url, file_name)      
    end
  end
  
  def update
      files = Utils.find_files(Dir.pwd)
      if files.length == 0 then
        puts 'No files found to update'
      end

      files.each do |file| 
        values = Utils.read_file(file)        
        url = values['url']
        file_name = "#{values['directory']}/#{values['fileName']}"
        Utils.download(url, file_name)      
      end
  end
  
  def upgrade(download)
    files = Utils.find_files(Dir.pwd)          
    if !files.nil? and files.length > 0 then
      files.each do |file|
        values = Utils.read_file(file)        
        group_id = values['groupId']
        artefact_id = values['artefactId']
        version = values['version']
        directory = values['directory']        
        extension = values['extension']        
        http_files = Utils.get_files(group_id, artefact_id, nil)
        http_files.each do |http_file| 
          if Utils.is_bigger_version?(version, http_file.version) and !File::file?("#{directory}/#{artefact_id}-#{http_file.version}.#{extension}") then
            puts "Found newer version of #{group_id} #{artefact_id}: #{http_file.version}"
            if download then
              export(group_id, artefact_id, file.version)              
            end
          end
        end
      end
    else
      puts 'You have no files managed by tfs'
    end    
  end
  
  def remove(group_id, artefact_id, version)
    file = Utils.get_files(group_id, artefact_id, version)[0]
    current_dir = Dir.pwd
    meta_file_loc = "#{current_dir}/.tfs/#{file.name}.tfs"
    file_loc = "#{current_dir}/#{file.name}"
    
    if File::file?(meta_file_loc) then
      puts "Removing meta-data for #{file.key} - #{meta_file_loc}"
      File.delete(meta_file_loc)      
    else
      puts "#{file.key} is not managed by TFS"
    end
    
    if File::file?(file_loc) then
      puts "Removing file #{file.key} - #{current_dir}/#{file.name}"
      File.delete(file_loc)
    else
      puts "#{file.key} is not managed by TFS"
    end    
  end
  
  def clean
      current_dir = Dir.pwd
      files = Utils.find_files(current_dir)
      if !files.nil? and files.length > 0 then
        files.each do |file| 
          values = Utils.read_file(file)        
          file_name = "#{values['directory']}/#{values['fileName']}"
          
          if File::file?(file_name) then
            File.delete(file_name)
          end          
        end
        FileUtils.rm_rf "#{current_dir}/.tfs"
      else
        puts 'You have no files managed by tfs'
      end
  end  
  
  def list
    files = Utils.find_files(Dir.pwd)          
    if !files.nil? and files.length > 0 then
      puts 'Files managed by tfs:'
      files.each do |file|
        values = Utils.read_file(file)        
        puts "#{values['groupId']} #{values['artefactId']} #{values['version']} - #{values['directory']}/#{values['fileName']}"
      end
    else
      puts 'You have no files managed by tfs'
    end      
  end  
  
  def search(group_id, artefact_id, version)
    files = Utils.get_files(group_id, artefact_id, version)            
    files.each do |file|
      puts "#{file.group_id} #{file.artefact_id} #{file.version}"
    end
  end
end

class App_Runner
  VERSION = '0.0.1'
  attr_reader :options

  def initialize(arguments)    
    @arguments = arguments
    @options = OpenStruct.new
    @options.verbose = false
    @options.quiet = false
  end  

  # Parse options, check arguments, then process the command
  def run
    if parsed_options? && arguments_valid? 
       puts "Start at #{DateTime.now}\n\n" if @options.verbose
       output_options if @options.verbose
       process_arguments            
       # setup
       start
       puts "\nFinished at #{DateTime.now}" if @options.verbose
     else
       output_usage
     end    
  end
  
  def start
    puts "Action: '#{@action}'"
    tfs = TFS.new()
    
    case @action
    when 'export'
      if !@group_id.nil? and !@artefact_id.nil? and !@version.nil? then
        tfs.export(@group_id, @artefact_id, @version)
      else
        puts 'You must specify groupId, artefactId and version'
      end
    when 'list'      
      tfs.list
    when 'update'
      tfs.update
    when 'upgrade'
      tfs.upgrade true
    when 'check'
      tfs.upgrade false  
    when 'remove'
      if !@group_id.nil? and !@artefact_id.nil? and !@version.nil? then
        tfs.remove(@group_id, @artefact_id, @version)
      else
        puts 'You must specify groupId, artefactId and version'
      end      
    when 'clean'
      tfs.clean
    when 'search'
      tfs.search(@group_id, @artefact_id, @version)
    else
      puts "Unknown action #{@action} exiting"
    end
  end
  
  protected
    def setup
      home_dir = "#{ENV['HOME']}/.tfa"
      repo_dir = "#{home_dir}/repository"
      if !File::directory?(home_dir) then
        puts 'No tfa home, creating...'
        Dir.mkdir(home_dir) 
      end
      if !File::directory?(repo_dir) then
        puts 'No tfa repository home, creating...'
        Dir.mkdir(repo_dir) 
      end      
    end
  
    def parsed_options?
      # Specify options
      opts = OptionParser.new 
      opts.on('-v', '--version')    { output_version ; exit 0 }
      opts.on('-h', '--help')       { output_help }
      opts.on('-V', '--verbose')    { @options.verbose = true }  
      opts.on('-q', '--quiet')      { @options.quiet = true }
      opts.parse!(@arguments) rescue return false
      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "#{name} = #{val}"
      end
    end

    def arguments_valid?
      true if @arguments.length >= 1
    end
    
    def process_arguments
      @action = @arguments[0]
      @group_id = @arguments[1]
      @artefact_id = @arguments[2]      
      @version = @arguments[3]
    end
    
    def output_help
      output_version
      RDoc::usage()
    end
    
    def output_usage
      RDoc::usage('usage')
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
end  

# Create and run the application
app = App_Runner.new(ARGV)
app.run

#ruby tfsclient/tfs.rb export org.cccs.jslibs jquery.collapsible 1.0.0
